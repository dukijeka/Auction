@using Microsoft.AspNet.Identity;
@model IEnumerable<Auction.ViewModels.AuctionBid>


@{
    ViewBag.Title = "Index";
}

<h2>Auctions</h2>

<h3>Search:</h3>

<form action="/Auctions" method="get" class="form-inline">
    Auction Name: &nbsp; &nbsp;
    <input type="text" name="name" class="form-control col-1" />
    &nbsp; &nbsp;Minimal Price &nbsp; &nbsp;
    <input type="number" name="minOffer" class="form-control col-1" min="0"  />
    &nbsp; &nbsp;Maximal Price&nbsp; &nbsp;
    <input type="number" name="maxOffer" class="form-control col-1" max="" /> &nbsp; &nbsp;
    <div class="form-group">
        <label for="state">State:</label>
        <select class="form-control" id="state" name="state">
            <option value="" selected> -- select an option -- </option>
            <option>READY</option>
            <option>OPENED</option>
            <option>CLOSED</option>
        </select>
    </div>
    &nbsp; &nbsp;
    <button class="btn btn-primary" type="submit">Search</button>

</form>


@if (Request.IsAuthenticated)
{
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
}

@if (ViewBag.Error != null)
{
    <div class="alert alert-danger">
        <strong>Error!</strong> @ViewBag.Error
    </div>
}

<div class="card-columns">
    @foreach (var item in Model)
    {
        <div class="card bg-secondary">
            <div class="card-body">
                @*<h4 class="card-title">@Html.ActionLink(item.Name, "Details", item.ID)</h4>*@
                <h4 class="card-title"><a href="Auctions/Details/@item.AuctionID">@item.AuctionName</a></h4>
                <p class="card-img"><img src="/ShowImage.ashx?id=@item.AuctionID" alt="ImageNotAvailable" /></p>
                <p class="card-text" id="timer @item.AuctionID"></p>
                <p class="card-text">State: @item.State</p>
                <p class="card-text">@item.price</p>
                @if (item.UserName != null)
                {
                    <p class="card-text">@item.UserName</p>
                }
                @using (Html.BeginForm("Create", "Bids"))
                {
                    @Html.AntiForgeryToken()

                    <input type="hidden" name="userID" value="@User.Identity.GetUserId()" />
                    <input type="hidden" name="auctionID" value="@item.AuctionID" />
                    if (item.price == null)
                    {
                        <input type="number" name="tokkensOffered" value="1" class="form-control" /> <br /> <br />
                    }
                    else
                    {
                        <input type="number" name="tokkensOffered" value="@(item.price + 1)" min="@(item.price + 1)" class="form-control" /> <br /> <br />
                    }
                    if (item.State == "OPENED")
                    {
                        <button class="btn btn-primary" type="submit" id="bidButton @item.AuctionID">Bid Now</button>
                    }
                    else
                    {
                        <button class="btn btn-primary" type="submit" id="bidButton @item.AuctionID" disabled>Bid Now</button>
                    }

                }

            </div>
        </div>

    }
</div>

@section scripts {
    <script>

        function sqlToJsDate(sqlDate) {
            //debugger;
        //sqlDate in SQL DATETIME format ("mm/dd/YYY hh:mm:ss [AM/PM]")
        var sqlDateArr1 = sqlDate.split("/");
        //format of sqlDateArr1[] = ['mm','dd','YYYY hh:mm:ss [AM/PM']]
        var sDay = sqlDateArr1[1];
        var sMonth = (Number(sqlDateArr1[0]) - 1).toString();
        var sqlDateArr2 = sqlDateArr1[2].split(" ");
        //format of sqlDateArr2[] = ['YYYY', 'hh:mm:ss', ['AM/PM']]
        var sYear = sqlDateArr2[0];
        var sqlDateArr3 = sqlDateArr2[1].split(":");
        //format of sqlDateArr3[] = ['hh','mm','ss']
        var sHour = sqlDateArr3[0];
        var sMinute = sqlDateArr3[1];
        var sSecond = sqlDateArr3[2];
        if (sqlDateArr2[2] == "PM") {
            sHour = "" + (Number(sHour) + 12);
        }
            var convertedDate = new Date(sYear, sMonth, sDay, sHour, sMinute, sSecond, 0);
            console.log("Inside method:");
            console.log("original date: " + sqlDate);

        console.log("converted Date: " + convertedDate);
        return convertedDate;

      // return new Date(sYear, sMonth, sDay, sHour, sMinute, sSecond, 0);

        }

        function timer(id, countDownDate) {
            // Update the count down every 1 second
                var x = setInterval(function () {

                    // Get local date and time
                    var localTime = new Date();

                    // convert it to UTC date and time
                    var now = new Date(localTime.getUTCFullYear(), localTime.getUTCMonth(), localTime.getUTCDate(),
                        localTime.getUTCHours(), localTime.getUTCMinutes(), localTime.getUTCSeconds(), localTime.getUTCMilliseconds());

                    // Find the distance between now an the count down date
                    var distance = countDownDate.getTime() - now.getTime();

                    // Time calculations for days, hours, minutes and seconds
                    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                    // Display the result in the element
                    document.getElementById("timer " + id).innerHTML = days + "d " + hours + "h "
                     + minutes + "m " + seconds + "s ";

                    // If the count down is finished, write some text
                    if (distance < 0) {
                        debugger;
                        clearInterval(x);
                        document.getElementById("timer " + id).innerHTML = "EXPIRED";
                        document.getElementById("bidButton " + id).className += " disabled";
                        document.getElementById("bidButton " + id).disabled = true;                    }
                }, 1000);
        }



    $(document).ready(function () {
        @foreach (var item in Model)
        {
            <text>

        @*document.getElementById("timer @item.AuctionID").innerHTML = countDownDate;*@

            </text>
        }
    });

    @foreach (var item in Model)
    {

		    <text>
                var countDownDate = sqlToJsDate("@item.OppenedOn.AddSeconds(item.Duration)");
                        //console.log(oppenedOn);
                       // var expirationDate = oppenedOn.setSeconds(oppenedOn.getSeconds() + 20);


                @*var countDownDate = new Date(oppenedOn.getTime() + @item.Duration * 1000).getTime();*@
                console.log("outside method. Results: ")
                console.log("Original date: " + "@item.OppenedOn");
                console.log("Duration: " + "@item.Duration");
                console.log("converted date" + String(countDownDate));
                console.log("Now: " + String(new Date()));

                timer("@item.AuctionID", countDownDate);
            </text>

    }


    </script>
}



